package org.scoan.visitors;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.Date;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Header;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.prism.paint.Color;

public class PDFGenerator {
	
	@Autowired
	static
	DataSource dataSource;
	
	private static final int LINE_SPACING = 18;
	private static final String DEFAULT_IMG = "/visitorsLog/images/profile.png";
	private static final String DEFAULT_IMG_PATH = "http://localhost:8080/visitorsLog/images/profile.png";
	private static final String ROOT = "/Applications/tomcat/";
	
	private static Font headFont = new Font(Font.FontFamily.HELVETICA, 24, Font.BOLD);
	private static Font headFontSmall = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
	private static Font bodyFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
	private static Font bodyBoldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
	private static Font bodyFontSmall = new Font(Font.FontFamily.HELVETICA, 8, Font.NORMAL);
	private static Font bodyBoldFontSmall = new Font(Font.FontFamily.HELVETICA, 8, Font.BOLD);
	
	public static void main(String[] args) {
		//getPDFdocument(new Visitor());
		//System.out.println(FileDownloadController.getImageAbsolutePath("/visitorsLog/get-uploaded-image?image=20171111124357.jpeg&page=manage-users"));
	}
	
	public static String getPDFDocument(GeneratedVisitor generatedVisitor, String fileLocation, String currentUser) {
		System.out.println(generatedVisitor.getFirstName() + " " + generatedVisitor.getMiddleName() + " " + generatedVisitor.getLastName());
		Document doc = new Document();
		
		try {
			PdfWriter.getInstance(doc, new FileOutputStream(fileLocation));
			
			
			
			doc.open();
			
			doc.setMargins(20.0f, 20.0f, 20.0f, 20.0f);
			
			Header generatedBy = new Header("Generated by", "The user");
			Header generatedOn = new Header("Generated on", new Date(System.currentTimeMillis()).toString());
			
			doc.add(generatedBy);
			doc.add(generatedOn);
			
			String imageDir;
			if(!generatedVisitor.getPicLocation().equals(DEFAULT_IMG))				
				imageDir = FileDownloadController.getImageAbsolutePath(generatedVisitor.getPicLocation());
			else
				imageDir = DEFAULT_IMG_PATH;
			
			PdfPTable table = new PdfPTable(new float[] {4.0f, 1.0f});
			table.setWidthPercentage(100.0f);
			
			PdfPCell leftCell = new PdfPCell();
			PdfPCell rightCell = new PdfPCell();
			
			leftCell.setBorderColor(BaseColor.WHITE);
			rightCell.setBorderColor(BaseColor.WHITE);
						
				
			Paragraph name = new Paragraph(generatedVisitor.getFirstName() + ((generatedVisitor.getMiddleName().equals("")) ? "" : " " + generatedVisitor.getMiddleName()) +
										   " " + generatedVisitor.getLastName(), headFont);
			
			name.setAlignment(Element.ALIGN_CENTER);
			name.setSpacingAfter(24);
			doc.add(name);
			
			PdfPTable specsTable = new PdfPTable(2);
			specsTable.setHorizontalAlignment(Element.ALIGN_CENTER);
			specsTable.setWidthPercentage(80.0f);
			specsTable.setHorizontalAlignment(Element.ALIGN_LEFT);
			PdfPCell leftSpecsCell = new PdfPCell();
			PdfPCell rightSpecsCell = new PdfPCell();
			
			
			Chunk countryField = new Chunk("Country: ", bodyBoldFont);
			leftSpecsCell.addElement(countryField);
			Chunk countryValue = new Chunk(generatedVisitor.getCountry(), bodyFont);
			rightSpecsCell.addElement(countryValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			
			
			Chunk dobField = new Chunk("Date of birth: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(dobField);
			Chunk dobValue = new Chunk(generatedVisitor.getDob(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(dobValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk sexField = new Chunk("Sex: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(sexField);
			Chunk sexValue = new Chunk(generatedVisitor.getSex(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(sexValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk msField = new Chunk("Marital status: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(msField);
			Chunk msValue = new Chunk(generatedVisitor.getMaritalStatus(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(msValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);

			
			Chunk phoneField = new Chunk("Phone: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(phoneField);
			Chunk phoneValue = new Chunk(generatedVisitor.getPhone1(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(phoneValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);

			
			Chunk emailField = new Chunk("Email: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(emailField);
			Chunk emailValue = new Chunk(generatedVisitor.getEmail(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(emailValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk websiteField = new Chunk("Website: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(websiteField);
			Chunk websiteValue = new Chunk(generatedVisitor.getWebsite(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(websiteValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk occupationField = new Chunk("Occupation: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(occupationField);
			Chunk occupationValue = new Chunk(generatedVisitor.getOccupation(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(occupationValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk ministryField = new Chunk("Ministry: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(ministryField);
			Chunk ministryValue = new Chunk(generatedVisitor.getMinistry(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(ministryValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk partnerField = new Chunk("Is a partner: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(partnerField);
			Chunk partnerValue = new Chunk(generatedVisitor.getIsPartner(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(partnerValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk blacklistField = new Chunk("Is on blacklist: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(blacklistField);
			Chunk blacklistValue = new Chunk(generatedVisitor.getBlacklisted(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(blacklistValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk lastVisitField = new Chunk("Last visit: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(lastVisitField);
			Chunk lastVisitValue = new Chunk(generatedVisitor.getLastVisit(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(lastVisitValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk recordedByField = new Chunk("Recorded by: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(recordedByField);
			Chunk recordedByValue = new Chunk(generatedVisitor.getRegisteredBy(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(recordedByValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk recordDateField = new Chunk("Record date: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(recordDateField);
			Chunk recordDateValue = new Chunk(generatedVisitor.getRegisterDate(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(recordDateValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
						
			leftCell.addElement(specsTable);
						
			try {
				System.out.println("Image directory for Visitor: " + imageDir);
				Image image = Image.getInstance(imageDir);
				image.scaleToFit(150, 1000);
				image.setAlignment(Image.ALIGN_RIGHT);
				rightCell.addElement(image);
				
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			table.addCell(leftCell);
			table.addCell(rightCell);
			
			doc.add(table);
			
			Paragraph visitsHeader = new Paragraph("Visits", headFontSmall);
			visitsHeader.setAlignment(Element.ALIGN_CENTER);
			visitsHeader.setSpacingBefore(30.0f);
			doc.add(visitsHeader);
			
			
			//The second table is for the visits
			
			//This will be a set of tables each representing a visit information
			
			String[][] visitsArray = generatedVisitor.getVisitsArray();
			
			PdfPTable visitTable;
						
			PdfPCell serialNumber;
			PdfPCell arrivalDate;
			PdfPCell arrivalTime;
			PdfPCell reason;
			PdfPCell takingMeds;
			PdfPCell medReport;
			PdfPCell modeOfVisit;
			PdfPCell referenceNo;
			PdfPCell screener;
			PdfPCell inCareOf;
			PdfPCell coordinator;
			PdfPCell dining;
			PdfPCell departureDate;
			PdfPCell departureTime;
			PdfPCell comment;
			PdfPCell recorder;
			
			PdfPCell serialNumber2;
			PdfPCell arrivalDate2;
			PdfPCell arrivalTime2;
			PdfPCell reason2;
			PdfPCell takingMeds2;
			PdfPCell medReport2;
			PdfPCell modeOfVisit2;
			PdfPCell referenceNo2;
			PdfPCell screener2;
			PdfPCell inCareOf2;
			PdfPCell coordinator2;
			PdfPCell dining2;
			PdfPCell departureDate2;
			PdfPCell departureTime2;
			PdfPCell comment2;
			PdfPCell recorder2;
			
			
			for(int i = 1; i < visitsArray.length; i++){
				visitTable = new PdfPTable(new float[]{3.0f, 7.0f});
				visitTable.setWidthPercentage(100.0f);
				
				serialNumber = new PdfPCell();
				serialNumber.setBackgroundColor(BaseColor.CYAN);
				arrivalDate = new PdfPCell();
				arrivalTime = new PdfPCell();
				reason = new PdfPCell();
				takingMeds = new PdfPCell();
				medReport = new PdfPCell();
				modeOfVisit = new PdfPCell();
				referenceNo = new PdfPCell();
				screener = new PdfPCell();
				inCareOf = new PdfPCell();
				coordinator = new PdfPCell();
				dining = new PdfPCell();
				departureDate = new PdfPCell();
				departureTime = new PdfPCell();
				comment = new PdfPCell();
				recorder = new PdfPCell();
				
				
				serialNumber.addElement(new Chunk("S/N", bodyBoldFontSmall));
				serialNumber.setHorizontalAlignment(Element.ALIGN_CENTER);
				
				arrivalDate.addElement(new Chunk("Arrival Date", bodyBoldFontSmall));
				arrivalTime.addElement(new Chunk("Arrival Time", bodyBoldFontSmall));
				reason.addElement(new Chunk("Reason", bodyBoldFontSmall));
				takingMeds.addElement(new Chunk("Taking Meds", bodyBoldFontSmall));
				medReport.addElement(new Chunk("Med Report", bodyBoldFontSmall));
				modeOfVisit.addElement(new Chunk("Mode of Visit", bodyBoldFontSmall));
				referenceNo.addElement(new Chunk("Reference No", bodyBoldFontSmall));
				screener.addElement(new Chunk("Screener", bodyBoldFontSmall));
				inCareOf.addElement(new Chunk("In Care of", bodyBoldFontSmall));
				coordinator.addElement(new Chunk("Coordinator", bodyBoldFontSmall));
				dining.addElement(new Chunk("Dining", bodyBoldFontSmall));
				departureDate.addElement(new Chunk("Departure Date", bodyBoldFontSmall));
				departureTime.addElement(new Chunk("Departure Time", bodyBoldFontSmall));
				comment.addElement(new Chunk("Comment", bodyBoldFontSmall));
				recorder.addElement(new Chunk("Recorded by", bodyBoldFontSmall));
				
				serialNumber2 = new PdfPCell();
				serialNumber2.setBackgroundColor(BaseColor.CYAN);
				
				arrivalDate2 = new PdfPCell();
				arrivalTime2 = new PdfPCell();
				reason2 = new PdfPCell();
				takingMeds2 = new PdfPCell();
				medReport2 = new PdfPCell();
				modeOfVisit2 = new PdfPCell();
				referenceNo2 = new PdfPCell();
				screener2 = new PdfPCell();
				inCareOf2 = new PdfPCell();
				coordinator2 = new PdfPCell();
				dining2 = new PdfPCell();
				departureDate2 = new PdfPCell();
				departureTime2 = new PdfPCell();
				comment2 = new PdfPCell();
				recorder2 = new PdfPCell();
				
				
				serialNumber2.addElement(new Chunk(visitsArray[i][0], bodyBoldFontSmall));
				serialNumber2.setHorizontalAlignment(Element.ALIGN_CENTER);
				
				arrivalDate2.addElement(new Chunk(visitsArray[i][1], bodyFontSmall));
				arrivalTime2.addElement(new Chunk(visitsArray[i][2], bodyFontSmall));
				reason2.addElement(new Chunk(visitsArray[i][3].replace("**********", ","), bodyFontSmall));
				takingMeds2.addElement(new Chunk(visitsArray[i][4], bodyFontSmall));
				medReport2.addElement(new Chunk(visitsArray[i][5], bodyFontSmall));
				modeOfVisit2.addElement(new Chunk(visitsArray[i][6], bodyFontSmall));
				referenceNo2.addElement(new Chunk(visitsArray[i][7], bodyFontSmall));
				screener2.addElement(new Chunk(visitsArray[i][8], bodyFontSmall));
				inCareOf2.addElement(new Chunk(visitsArray[i][9], bodyFontSmall));
				coordinator2.addElement(new Chunk(visitsArray[i][10], bodyFontSmall));
				dining2.addElement(new Chunk(visitsArray[i][11], bodyFontSmall));
				departureDate2.addElement(new Chunk(visitsArray[i][12], bodyFontSmall));
				departureTime2.addElement(new Chunk(visitsArray[i][13], bodyFontSmall));
				comment2.addElement(new Chunk(visitsArray[i][14].replace("**********", ","), bodyFontSmall));
				recorder2.addElement(new Chunk(visitsArray[i][15], bodyFontSmall));
				
				
				
				visitTable.addCell(serialNumber);
				visitTable.addCell(serialNumber2);
				visitTable.addCell(arrivalDate);
				visitTable.addCell(arrivalDate2);
				visitTable.addCell(arrivalTime);
				visitTable.addCell(arrivalTime2);
				visitTable.addCell(reason);
				visitTable.addCell(reason2);
				visitTable.addCell(takingMeds);
				visitTable.addCell(takingMeds2);
				visitTable.addCell(medReport);
				visitTable.addCell(medReport2);
				visitTable.addCell(modeOfVisit);
				visitTable.addCell(modeOfVisit2);
				visitTable.addCell(referenceNo);
				visitTable.addCell(referenceNo2);
				visitTable.addCell(screener);
				visitTable.addCell(screener2);
				visitTable.addCell(inCareOf);
				visitTable.addCell(inCareOf2);
				visitTable.addCell(coordinator);
				visitTable.addCell(coordinator2);
				visitTable.addCell(dining);
				visitTable.addCell(dining2);
				visitTable.addCell(departureDate);
				visitTable.addCell(departureDate2);
				visitTable.addCell(departureTime);
				visitTable.addCell(departureTime2);
				visitTable.addCell(comment);
				visitTable.addCell(comment2);
				visitTable.addCell(recorder);
				visitTable.addCell(recorder2);
				
				visitTable.setSpacingBefore(20.0f);
				visitTable.setSpacingAfter(20.0f);
				doc.add(visitTable);
				
			}
			
			doc.add(new Paragraph("Total number of visits: " + (visitsArray.length - 1), bodyFontSmall));
			doc.add(new Paragraph(" "));
			
			doc.add(new Paragraph("Generated by: " + currentUser, bodyFontSmall));
			doc.add(new Paragraph("Date: " + new java.util.Date().toString(), bodyFontSmall));
			
			doc.close();
			

			
			File file = new File("test.pdf");
			
			if(file.exists()) {
				System.out.println("file stored in: " + file.getAbsolutePath());
			}
			
		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return "failure";
			
		}
		
		return "success";
	}
	
	
	public static String getPDFdocument(GeneratedUser generatedUser, String fileLocation, String currentUser, int[] summaryArray) {
		//System.out.println(generatedUser.getFirstName() + " " + generatedUser.getMiddleName() + " " + generatedUser.getLastName());
		
				
		int visitorsRegistered = summaryArray[0];
		int visitsRegistered = summaryArray[1];
		int updatesDone = summaryArray[2];
		int deletes = summaryArray[3];
		
		Document doc = new Document();
		
		try {
			PdfWriter.getInstance(doc, new FileOutputStream(fileLocation));
			
			
			
			doc.open();
			
			doc.setMargins(20.0f, 20.0f, 20.0f, 20.0f);
			
			Header generatedBy = new Header("Generated by", "The user");
			Header generatedOn = new Header("Generated on", new Date(System.currentTimeMillis()).toString());
			
			doc.add(generatedBy);
			doc.add(generatedOn);
			
			
			String imageDir;
			if(!generatedUser.getPicLocation().equals(DEFAULT_IMG))				
				imageDir = FileDownloadController.getImageAbsolutePath(generatedUser.getPicLocation());
			else
				imageDir = DEFAULT_IMG_PATH;
			
			PdfPTable table = new PdfPTable(new float[] {4.0f, 1.0f});
			table.setWidthPercentage(100.0f);
			
			PdfPCell leftCell = new PdfPCell();
			PdfPCell rightCell = new PdfPCell();
			
			leftCell.setBorderColor(BaseColor.WHITE);
			rightCell.setBorderColor(BaseColor.WHITE);
						
				
			Paragraph name = new Paragraph(generatedUser.getFirstName() + ((generatedUser.getMiddleName().equals("")) ? "" : " " + generatedUser.getMiddleName()) +
										   " " + generatedUser.getLastName(), headFont);
			
			name.setAlignment(Element.ALIGN_CENTER);
			name.setSpacingAfter(24);
			doc.add(name);
			
			PdfPTable specsTable = new PdfPTable(2);
			specsTable.setHorizontalAlignment(Element.ALIGN_CENTER);
			specsTable.setWidthPercentage(80.0f);
			specsTable.setHorizontalAlignment(Element.ALIGN_LEFT);
			PdfPCell leftSpecsCell = new PdfPCell();
			PdfPCell rightSpecsCell = new PdfPCell();
			
			
			Chunk roleField = new Chunk("Role: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(roleField);
			Chunk roleValue = new Chunk(generatedUser.getRole(), bodyFont);//generatedUser.getRole()
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(roleValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			
			Chunk dobField = new Chunk("Date of birth: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(dobField);
			Chunk dobValue = new Chunk(generatedUser.getDob(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(dobValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk sexField = new Chunk("Sex: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(sexField);
			Chunk sexValue = new Chunk(generatedUser.getSex(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(sexValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk msField = new Chunk("Marital status: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(msField);
			Chunk msValue = new Chunk(generatedUser.getMaritalStatus(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(msValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);

			Chunk lastLoginField = new Chunk("Last Active: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(lastLoginField);
			Chunk lastLoginValue = new Chunk(generatedUser.getLastLogin(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(lastLoginValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk recordedByField = new Chunk("Recorded by: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(recordedByField);
			Chunk recordedByValue = new Chunk(generatedUser.getRegisteredBy(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(recordedByValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
			Chunk recordDateField = new Chunk("Record date: ", bodyBoldFont);
			leftSpecsCell = new PdfPCell();
			leftSpecsCell.addElement(recordDateField);
			Chunk recordDateValue = new Chunk(generatedUser.getRegisterDate(), bodyFont);
			rightSpecsCell = new PdfPCell();
			rightSpecsCell.addElement(recordDateValue);
			addToTable(leftSpecsCell, rightSpecsCell, specsTable);
			
						
			leftCell.addElement(specsTable);
						
			try {
				System.out.println("Image directory for user: " + imageDir);
				Image image = Image.getInstance(imageDir);
				image.scaleToFit(150, 1000);
				image.setAlignment(Image.ALIGN_RIGHT);
				rightCell.addElement(image);
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				
				e.printStackTrace();
			}
			
			table.addCell(leftCell);
			table.addCell(rightCell);
			
			
			
			//The second table is for the the visits
			
			
			PdfPTable table2 = new PdfPTable(9); 
			table2.setWidthPercentage(100.0f);
			
			PdfPCell serialNumber = new PdfPCell();
			serialNumber.addElement(new Chunk("s/n", bodyBoldFontSmall));
			PdfPCell date = new PdfPCell();
			date.addElement(new Chunk("Date", bodyBoldFontSmall));
			PdfPCell time = new PdfPCell();
			time.addElement(new Chunk("Time", bodyBoldFontSmall));
			PdfPCell type = new PdfPCell();
			type.addElement(new Chunk("type", bodyBoldFontSmall));
			PdfPCell tableName = new PdfPCell();
			tableName.addElement(new Chunk("Table", bodyBoldFontSmall));
			PdfPCell columnName = new PdfPCell();
			columnName.addElement(new Chunk("ColumnName", bodyBoldFontSmall));
			PdfPCell visitorOrUser = new PdfPCell();
			visitorOrUser.addElement(new Chunk("Visitor/User", bodyBoldFontSmall));
			PdfPCell oldValue = new PdfPCell();
			oldValue.addElement(new Chunk("Changed from", bodyBoldFontSmall));
			PdfPCell newValue = new PdfPCell();
			newValue.addElement(new Chunk("Changed to", bodyBoldFontSmall));
			//PdfPCell comment = new PdfPCell();
			//comment.addElement(new Chunk("Comment", bodyBoldFontSmall));
			
			table2.addCell(serialNumber);
			table2.addCell(date);
			table2.addCell(time);
			table2.addCell(type);
			table2.addCell(tableName);
			table2.addCell(columnName);
			table2.addCell(visitorOrUser);
			table2.addCell(oldValue);
			table2.addCell(newValue);
			//table2.addCell(comment);
			
			//This would be filled in with a loop
			String[][] activitiesArray = generatedUser.getActivitiesArray();
			System.out.println("Activities Array length: " + activitiesArray.length);
			
			int arrayLength = activitiesArray.length;
			if(arrayLength > 1) {
				for(int i = 0; i < arrayLength; i++) {
					//visit = visitsArray[i];
					if(i > 0) {
						serialNumber = new PdfPCell();
						try {
							serialNumber.addElement(new Chunk(activitiesArray[i][0], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							serialNumber.addElement(new Chunk(""));
						}
						date = new PdfPCell();
						try {
							date.addElement(new Chunk(activitiesArray[i][1], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							date.addElement(new Chunk(""));
						}
						time = new PdfPCell();
						try {
							time.addElement(new Chunk(activitiesArray[i][2], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							time.addElement(new Chunk(""));
						}
						type = new PdfPCell();
						try {
							type.addElement(new Chunk(activitiesArray[i][3], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							type.addElement(new Chunk(""));
						}
						tableName = new PdfPCell();
						try {
							tableName.addElement(new Chunk(activitiesArray[i][4], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							tableName.addElement(new Chunk(""));
						}
						columnName = new PdfPCell();
						try {
							columnName.addElement(new Chunk(activitiesArray[i][5], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							columnName.addElement(new Chunk(""));
						}
						visitorOrUser = new PdfPCell();
						try {
							visitorOrUser.addElement(new Chunk(activitiesArray[i][6], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							visitorOrUser.addElement(new Chunk(""));
						}
						oldValue = new PdfPCell();
						try {
							oldValue.addElement(new Chunk(activitiesArray[i][7], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							oldValue.addElement(new Chunk(""));
						}
						newValue = new PdfPCell();
						try {
							newValue.addElement(new Chunk(activitiesArray[i][8], bodyFontSmall));
						}catch(Exception ex) {
							ex.printStackTrace();
							newValue.addElement(new Chunk(""));
						}
						//comment = new PdfPCell();
						//comment.addElement(new Chunk(activitiesArray[i][9], bodyFontSmall));
						
						
						table2.addCell(serialNumber);
						table2.addCell(date);
						table2.addCell(time);
						table2.addCell(type);
						table2.addCell(tableName);
						table2.addCell(columnName);
						table2.addCell(visitorOrUser);
						table2.addCell(oldValue);
						table2.addCell(newValue);	
						//table2.addCell(comment);
							
					}					
					
				}
			}
			
			
			
			
			doc.add(table);
			
			Paragraph visitsHeader = new Paragraph("Activities", headFontSmall);
			visitsHeader.setAlignment(Element.ALIGN_CENTER);
			visitsHeader.setSpacingBefore(30.0f);
			doc.add(visitsHeader);
			table2.setSpacingBefore(10.0f);
			table2.setSpacingAfter(20.0f);
			doc.add(table2);
			
			doc.add(new Paragraph("Total records added (All): " + (visitorsRegistered + visitsRegistered), bodyFontSmall));			
			doc.add(new Paragraph("Total visitors entered: " + visitorsRegistered, bodyFontSmall));
			doc.add(new Paragraph("Total visits entered: " + visitsRegistered, bodyFontSmall));
			doc.add(new Paragraph("Total updates made: " + updatesDone, bodyFontSmall));
			doc.add(new Paragraph("Total deletes: " + deletes, bodyFontSmall));
			doc.add(new Paragraph(" "));
			
			doc.add(new Paragraph("Generated by: " + currentUser, bodyFontSmall));
			doc.add(new Paragraph("Date: " + new java.util.Date().toString(), bodyFontSmall));
			
			doc.close();
			
			//File file = new File("test.pdf");
			
			//if(file.exists()) {
			//	System.out.println("file stored in: " + file.getAbsolutePath());
			//}
			
		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return "failure";
			
		}
		
		return "success";
	}
	
	private static void addToTable(PdfPCell leftSpecsCell, PdfPCell rightSpecsCell, PdfPTable specsTable) {
		leftSpecsCell.setBorderColor(BaseColor.WHITE);
		rightSpecsCell.setBorderColor(BaseColor.WHITE);
		specsTable.addCell(leftSpecsCell);
		specsTable.addCell(rightSpecsCell);
	}

}
